name: Release version and upload QA build artifact

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened, closed]
    branches:
      - main

jobs:
  build_and_release_qa:
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.action != 'closed')
    runs-on: ubuntu-latest
    name: Build and Release QA Job
    steps:
      - uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
          submodules: true
          lfs: false

      - name: Install Dependencies
        run: npm install

      - name: Generate Version from Changeset
        run: |
          npx changeset version
          VERSION=$(node -p "require('./package.json').version")
          echo "FRONTEND_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Commit and Push Version Changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore: bump version package to $FRONTEND_VERSION [skip ci]" || echo "No changes to commit"
          git push origin main || echo "No changes to push"

      - name: Clean previous builds
        run: |
          rm -rf .next
          rm -rf out
          rm -rf out-qa

      - name: Build App for QA
        run: |
          NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL_QA }} npm run build
          npm run export -- -o out-qa
        env:
          NEXT_PUBLIC_API_KEY: ${{ secrets.NEXT_PUBLIC_API_KEY }}
          FRONTEND_VERSION: ${{ env.FRONTEND_VERSION }}

      - name: Zip QA build output
        run: |
          cd out-qa
          zip -r ../frontend-qa-${{ env.FRONTEND_VERSION }}.zip .

      - name: Upload QA build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-qa-${{ env.FRONTEND_VERSION }}
          path: frontend-qa-${{ env.FRONTEND_VERSION }}.zip

      - name: Create GitHub Release for QA build
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.FRONTEND_VERSION }}-qa
          name: Release QA ${{ env.FRONTEND_VERSION }} - ${{ github.run_number }}
          files: frontend-qa-${{ env.FRONTEND_VERSION }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
